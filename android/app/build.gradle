apply plugin: "com.android.application"

import com.android.build.OutputFile


project.ext.react = [
        entryFile: "index.js",
        nodeExecutableAndArgs : ["/usr/local/bin/node"]
]

apply from: "../../node_modules/react-native/react.gradle"


def enableSeparateBuildPerCPUArchitecture = false


def enableProguardInReleaseBuilds = false


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.applicationId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api project(':react-native-google-signin')
    api project(':react-native-picker')
    api(project(':react-native-google-places')){
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-places'
        exclude group: 'com.google.android.gms', module: 'play-services-location'
    }
    api project(':react-native-popover-menu')
    api project(':react-native-youtube')
    api project(':react-native-image-crop-picker')
    api project(':react-native-spinkit')
    api project(':react-native-fetch-blob')
    api project(':react-native-fast-image')
    api(project(':react-native-google-signin')) {
        exclude group: "com.google.android.gms" // very important
    }

    api 'com.google.android.gms:play-services-auth:16.0.0'
    api 'com.google.android.gms:play-services-base:16.0.0'
    api 'com.google.android.gms:play-services-maps:16.0.0'
    api "com.google.android.gms:play-services-places:16.0.0"
    api "com.google.android.gms:play-services-location:16.0.0"
    api project(':react-native-maps')
    api project(':react-native-share')
    api project(':react-native-fbsdk')
    api project(':react-native-localization')
    api project(':react-native-restart')
    api project(':react-native-vector-icons')
    api "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    api 'com.facebook.react:react-native:+'
    api 'com.android.support:multidex:1.0.0'
}


task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}


apply plugin: 'com.google.gms.google-services'
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '26.0.2'
            }
        }
    }
}