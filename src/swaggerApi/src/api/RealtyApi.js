/**
 * REMS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([
      'ApiClient',
      'model/GenericError',
      'model/GenericSuscess',
      'model/Realty',
      'model/RealtyKeyword',
      'model/RealtyList',
      'model/RealtyMap'
    ], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(
      require('../ApiClient'),
      require('../model/GenericError'),
      require('../model/GenericSuscess'),
      require('../model/Realty'),
      require('../model/RealtyKeyword'),
      require('../model/RealtyList'),
      require('../model/RealtyMap')
    );
  } else {
    // Browser globals (root is window)
    if (!root.RemsApi) {
      root.RemsApi = {};
    }
    root.RemsApi.RealtyApi = factory(
      root.RemsApi.ApiClient,
      root.RemsApi.GenericError,
      root.RemsApi.GenericSuscess,
      root.RemsApi.Realty,
      root.RemsApi.RealtyKeyword,
      root.RemsApi.RealtyList,
      root.RemsApi.RealtyMap
    );
  }
})(this, function(
  ApiClient,
  GenericError,
  GenericSuscess,
  Realty,
  RealtyKeyword,
  RealtyList,
  RealtyMap
) {
  'use strict';

  /**
   * Realty service.
   * @module api/RealtyApi
   * @version 1.0.0
   */

  /**
   * Constructs a new RealtyApi.
   * @alias module:api/RealtyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    /**
     * Callback function to receive the result of the deleteFavorite operation.
     * @callback module:api/RealtyApi~deleteFavoriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuscess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} realtyId
     * @param {module:api/RealtyApi~deleteFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuscess}
     */
    this.deleteFavorite = function(realtyId, callback) {
      var postBody = null;

      // verify the required parameter 'realtyId' is set
      if (realtyId === undefined || realtyId === null) {
        throw new Error(
          "Missing the required parameter 'realtyId' when calling deleteFavorite"
        );
      }

      var pathParams = {
        realty_id: realtyId
      };
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericSuscess;

      return this.apiClient.callApi(
        '/realty/favorite/{realty_id}',
        'DELETE',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the deleteKeyword operation.
     * @callback module:api/RealtyApi~deleteKeywordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuscess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ids
     * @param {module:api/RealtyApi~deleteKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuscess}
     */
    this.deleteKeyword = function(ids, callback) {
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error(
          "Missing the required parameter 'ids' when calling deleteKeyword"
        );
      }

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {
        ids: ids
      };

      console.log(ids, formParams);

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = GenericSuscess;

      return this.apiClient.callApi(
        '/realty/keyword',
        'DELETE',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the listFavorite operation.
     * @callback module:api/RealtyApi~listFavoriteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RealtyList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page
     * @param {module:model/String} opts.sort
     * @param {module:api/RealtyApi~listFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RealtyList>}
     */
    this.listFavorite = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        page: opts['page'],
        sort: opts['sort']
      };
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RealtyList];

      return this.apiClient.callApi(
        '/realty/favorite',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the listKeyword operation.
     * @callback module:api/RealtyApi~listKeywordCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RealtyKeyword>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RealtyApi~listKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RealtyKeyword>}
     */
    this.listKeyword = function(callback) {
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RealtyKeyword];

      return this.apiClient.callApi(
        '/realty/keyword',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the listRealty operation.
     * @callback module:api/RealtyApi~listRealtyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RealtyList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page
     * @param {Number} opts.method
     * @param {Number} opts.lat
     * @param {Number} opts.lng
     * @param {Number} opts.type
     * @param {Number} opts.bathroom
     * @param {Number} opts.bedroom
     * @param {String} opts.area
     * @param {String} opts.price
     * @param {String} opts.utils
     * @param {Number} opts.authorId
     * @param {Number} opts.userId
     * @param {module:api/RealtyApi~listRealtyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RealtyList>}
     */
    this.listRealty = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        page: opts['page'],
        method: opts['method'],
        lat: opts['lat'],
        lng: opts['lng'],
        type: opts['type'],
        bathroom: opts['bathroom'],
        bedroom: opts['bedroom'],
        area: opts['area'],
        price: opts['price'],
        utils: opts['utils'],
        author_id: opts['authorId'],
        user_id: opts['userId']
      };
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RealtyList];

      return this.apiClient.callApi(
        '/realty',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the mapRealty operation.
     * @callback module:api/RealtyApi~mapRealtyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RealtyMap>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.method
     * @param {Number} opts.lat
     * @param {Number} opts.lng
     * @param {Number} opts.type
     * @param {Number} opts.bathroom
     * @param {Number} opts.bedroom
     * @param {String} opts.area
     * @param {String} opts.price
     * @param {String} opts.utils
     * @param {Number} opts.authorId
     * @param {Number} opts.userId
     * @param {module:api/RealtyApi~mapRealtyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RealtyMap>}
     */
    this.mapRealty = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {
        method: opts['method'],
        lat: opts['lat'],
        lng: opts['lng'],
        type: opts['type'],
        bathroom: opts['bathroom'],
        bedroom: opts['bedroom'],
        area: opts['area'],
        price: opts['price'],
        utils: opts['utils'],
        author_id: opts['authorId'],
        user_id: opts['userId']
      };
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RealtyMap];

      return this.apiClient.callApi(
        '/realty/map',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the postFavorite operation.
     * @callback module:api/RealtyApi~postFavoriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealtyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} realtyId
     * @param {module:api/RealtyApi~postFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealtyList}
     */
    this.postFavorite = function(realtyId, callback) {
      var postBody = null;

      // verify the required parameter 'realtyId' is set
      if (realtyId === undefined || realtyId === null) {
        throw new Error(
          "Missing the required parameter 'realtyId' when calling postFavorite"
        );
      }

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {
        realty_id: realtyId
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = RealtyList;

      return this.apiClient.callApi(
        '/realty/favorite',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the postRealty operation.
     * @callback module:api/RealtyApi~postRealtyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Realty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Realty} opts.body
     * @param {module:api/RealtyApi~postRealtyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Realty}
     */
    this.postRealty = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Realty;

      return this.apiClient.callApi(
        '/realty',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the saveKeyword operation.
     * @callback module:api/RealtyApi~saveKeywordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RealtyKeyword} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} address
     * @param {Number} lat
     * @param {Number} lng
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter
     * @param {module:api/RealtyApi~saveKeywordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RealtyKeyword}
     */
    this.saveKeyword = function(address, lat, lng, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'address' is set
      if (address === undefined || address === null) {
        throw new Error(
          "Missing the required parameter 'address' when calling saveKeyword"
        );
      }

      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error(
          "Missing the required parameter 'lat' when calling saveKeyword"
        );
      }

      // verify the required parameter 'lng' is set
      if (lng === undefined || lng === null) {
        throw new Error(
          "Missing the required parameter 'lng' when calling saveKeyword"
        );
      }

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {
        address: address,
        lat: lat,
        lng: lng,
        filter: opts['filter']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = RealtyKeyword;

      return this.apiClient.callApi(
        '/realty/keyword',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the uploadImages operation.
     * @callback module:api/RealtyApi~uploadImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuscess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} opts.images
     * @param {module:api/RealtyApi~uploadImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuscess}
     */
    this.uploadImages = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {
        images: opts['images']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = GenericSuscess;

      return this.apiClient.callApi(
        '/realty/upload',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the viewMapRealty operation.
     * @callback module:api/RealtyApi~viewMapRealtyCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RealtyMap>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} ids
     * @param {module:api/RealtyApi~viewMapRealtyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RealtyMap>}
     */
    this.viewMapRealty = function(ids, callback) {
      var postBody = null;

      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error(
          "Missing the required parameter 'ids' when calling viewMapRealty"
        );
      }

      var pathParams = {};
      var queryParams = {
        ids: ids
      };
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [RealtyMap];

      return this.apiClient.callApi(
        '/realty/mapView',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the viewRealty operation.
     * @callback module:api/RealtyApi~viewRealtyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Realty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.userId
     * @param {module:api/RealtyApi~viewRealtyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Realty}
     */
    this.viewRealty = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error(
          "Missing the required parameter 'id' when calling viewRealty"
        );
      }

      var pathParams = {
        id: id
      };
      var queryParams = {
        user_id: opts['userId']
      };
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Realty;

      return this.apiClient.callApi(
        '/realty/{id}',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };
  };

  return exports;
});
