/**
 * REMS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([
      'ApiClient',
      'model/GenericError',
      'model/GenericSuscess',
      'model/LoginView',
      'model/User',
      'model/UserRegister'
    ], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(
      require('../ApiClient'),
      require('../model/GenericError'),
      require('../model/GenericSuscess'),
      require('../model/LoginView'),
      require('../model/User'),
      require('../model/UserRegister')
    );
  } else {
    // Browser globals (root is window)
    if (!root.RemsApi) {
      root.RemsApi = {};
    }
    root.RemsApi.UserApi = factory(
      root.RemsApi.ApiClient,
      root.RemsApi.GenericError,
      root.RemsApi.GenericSuscess,
      root.RemsApi.LoginView,
      root.RemsApi.User,
      root.RemsApi.UserRegister
    );
  }
}(this, function(
  ApiClient,
  GenericError,
  GenericSuscess,
  LoginView,
  User,
  UserRegister
) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserApi.
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;

    /**
     * Callback function to receive the result of the forgot operation.
     * @callback module:api/UserApi~forgotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuscess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} email
     * @param {module:api/UserApi~forgotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuscess}
     */
    this.forgot = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error(
          "Missing the required parameter 'email' when calling forgot"
        );
      }

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {
        email: email
      };

      var authNames = [];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = GenericSuscess;

      return this.apiClient.callApi(
        '/user/forgot',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id
     * @param {module:api/UserApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUser = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error(
          "Missing the required parameter 'id' when calling getUser"
        );
      }

      var pathParams = {
        id: id
      };
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/user/{id}',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the me operation.
     * @callback module:api/UserApi~meCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserApi~meCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.me = function(callback) {
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/user/me',
        'GET',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the updatePassword operation.
     * @callback module:api/UserApi~updatePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuscess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} currentPassword
     * @param {String} newPassword
     * @param {module:api/UserApi~updatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuscess}
     */
    this.updatePassword = function(currentPassword, newPassword, callback) {
      var postBody = null;

      // verify the required parameter 'currentPassword' is set
      if (currentPassword === undefined || currentPassword === null) {
        throw new Error(
          "Missing the required parameter 'currentPassword' when calling updatePassword"
        );
      }

      // verify the required parameter 'newPassword' is set
      if (newPassword === undefined || newPassword === null) {
        throw new Error(
          "Missing the required parameter 'newPassword' when calling updatePassword"
        );
      }

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {
        current_password: currentPassword,
        new_password: newPassword
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var accepts = ['application/json'];
      var returnType = GenericSuscess;

      return this.apiClient.callApi(
        '/user/update-password',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UserApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/UserRegister} opts.body
     * @param {module:api/UserApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginView}
     */
    this.updateUser = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      console.log(postBody);
      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {};

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LoginView;

      return this.apiClient.callApi(
        '/user/me',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };

    /**
     * Callback function to receive the result of the uploadAvatar operation.
     * @callback module:api/UserApi~uploadAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {File} opts.file upload file avatar
     * @param {module:api/UserApi~uploadAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.uploadAvatar = function(opts, callback) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {};
      var queryParams = {};
      var collectionQueryParams = {};
      var headerParams = {};
      var formParams = {
        file: opts['file']
      };

      var authNames = ['Bearer'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = User;

      return this.apiClient.callApi(
        '/user/avatar',
        'POST',
        pathParams,
        queryParams,
        collectionQueryParams,
        headerParams,
        formParams,
        postBody,
        authNames,
        contentTypes,
        accepts,
        returnType,
        callback
      );
    };
  };

  return exports;
}));
