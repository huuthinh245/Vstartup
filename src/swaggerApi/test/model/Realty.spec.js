/**
 * REMS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RemsApi);
  }
}(this, function(expect, RemsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RemsApi.Realty();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Realty', function() {
    it('should create an instance of Realty', function() {
      // uncomment below and update the code to test Realty
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be.a(RemsApi.Realty);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property authorId (base name: "author_id")', function() {
      // uncomment below and update the code to test the property authorId
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property code (base name: "code")', function() {
      // uncomment below and update the code to test the property code
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "project_id")', function() {
      // uncomment below and update the code to test the property projectId
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property excerpt (base name: "excerpt")', function() {
      // uncomment below and update the code to test the property excerpt
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property thumb (base name: "thumb")', function() {
      // uncomment below and update the code to test the property thumb
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property featured (base name: "featured")', function() {
      // uncomment below and update the code to test the property featured
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "start_date")', function() {
      // uncomment below and update the code to test the property startDate
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "end_date")', function() {
      // uncomment below and update the code to test the property endDate
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "method")', function() {
      // uncomment below and update the code to test the property method
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property typeId (base name: "type_id")', function() {
      // uncomment below and update the code to test the property typeId
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property area (base name: "area")', function() {
      // uncomment below and update the code to test the property area
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property areaBuild (base name: "area_build")', function() {
      // uncomment below and update the code to test the property areaBuild
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property toilet (base name: "toilet")', function() {
      // uncomment below and update the code to test the property toilet
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property bedroom (base name: "bedroom")', function() {
      // uncomment below and update the code to test the property bedroom
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property bathroom (base name: "bathroom")', function() {
      // uncomment below and update the code to test the property bathroom
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property direction (base name: "direction")', function() {
      // uncomment below and update the code to test the property direction
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property floor (base name: "floor")', function() {
      // uncomment below and update the code to test the property floor
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property road (base name: "road")', function() {
      // uncomment below and update the code to test the property road
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property front (base name: "front")', function() {
      // uncomment below and update the code to test the property front
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property length (base name: "length")', function() {
      // uncomment below and update the code to test the property length
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property width (base name: "width")', function() {
      // uncomment below and update the code to test the property width
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property rearHatch (base name: "rear_hatch")', function() {
      // uncomment below and update the code to test the property rearHatch
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property priceUnit (base name: "price_unit")', function() {
      // uncomment below and update the code to test the property priceUnit
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property wardId (base name: "ward_id")', function() {
      // uncomment below and update the code to test the property wardId
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property districtId (base name: "district_id")', function() {
      // uncomment below and update the code to test the property districtId
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property cityId (base name: "city_id")', function() {
      // uncomment below and update the code to test the property cityId
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property ward (base name: "ward")', function() {
      // uncomment below and update the code to test the property ward
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property district (base name: "district")', function() {
      // uncomment below and update the code to test the property district
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property coordinate (base name: "coordinate")', function() {
      // uncomment below and update the code to test the property coordinate
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property contactName (base name: "contact_name")', function() {
      // uncomment below and update the code to test the property contactName
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property contactAddress (base name: "contact_address")', function() {
      // uncomment below and update the code to test the property contactAddress
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property contactPhone (base name: "contact_phone")', function() {
      // uncomment below and update the code to test the property contactPhone
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property contactEmail (base name: "contact_email")', function() {
      // uncomment below and update the code to test the property contactEmail
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property isFavorite (base name: "is_favorite")', function() {
      // uncomment below and update the code to test the property isFavorite
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

    it('should have the property utility (base name: "utility")', function() {
      // uncomment below and update the code to test the property utility
      //var instane = new RemsApi.Realty();
      //expect(instance).to.be();
    });

  });

}));
