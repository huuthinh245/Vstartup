/**
 * REMS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RemsApi);
  }
}(this, function(expect, RemsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RemsApi.Project();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Project', function() {
    it('should create an instance of Project', function() {
      // uncomment below and update the code to test Project
      //var instane = new RemsApi.Project();
      //expect(instance).to.be.a(RemsApi.Project);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property authorId (base name: "author_id")', function() {
      // uncomment below and update the code to test the property authorId
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property typeId (base name: "type_id")', function() {
      // uncomment below and update the code to test the property typeId
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property excerpt (base name: "excerpt")', function() {
      // uncomment below and update the code to test the property excerpt
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property thumb (base name: "thumb")', function() {
      // uncomment below and update the code to test the property thumb
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property image (base name: "image")', function() {
      // uncomment below and update the code to test the property image
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property featured (base name: "featured")', function() {
      // uncomment below and update the code to test the property featured
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property price (base name: "price")', function() {
      // uncomment below and update the code to test the property price
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property district (base name: "district")', function() {
      // uncomment below and update the code to test the property district
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property ward (base name: "ward")', function() {
      // uncomment below and update the code to test the property ward
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property commission (base name: "commission")', function() {
      // uncomment below and update the code to test the property commission
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

    it('should have the property coordinate (base name: "coordinate")', function() {
      // uncomment below and update the code to test the property coordinate
      //var instane = new RemsApi.Project();
      //expect(instance).to.be();
    });

  });

}));
